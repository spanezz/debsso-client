#!/usr/bin/python3
from debssolib.certs import Certs
from debssolib.utils import Cli, Command
import sys
import os
import shlex
import subprocess
import requests
import argparse
import logging

log = logging.getLogger()


class Exec(Command):
    """
    Exec command with client certificates available in the file system. Use --
    before the rest of the command line
    """
    @classmethod
    def add_parser(cls, subparsers):
        sp = super().add_parser(subparsers)
        sp.add_argument("args", nargs="+", help="command line to exec")
        return sp

    def run(self, args):
        certs = Certs.from_browser()
        with certs.tempfiles() as files:
            env = dict(os.environ)
            # TODO: export common wget/curl envs for certs if they exist
            env["DEBSSO_CERT_KEY"] = files.key_pathname
            env["DEBSSO_CERT_CRT"] = files.crt_pathname
            proc = subprocess.Popen(args.args, env=env)
            res = proc.wait()
        sys.exit(res)


class Curl(Command):
    """
    Run curl adding options to use client certificates. Use -- before the rest of the curl command line
    """
    @classmethod
    def add_parser(cls, subparsers):
        sp = super().add_parser(subparsers)
        sp.add_argument("args", nargs="+", help="curl arguments")
        return sp

    def run(self, args):
        certs = Certs.from_browser()
        with certs.tempfiles() as files:
            cmd = ["curl", "--key", files.key_pathname, "--cert", files.crt_pathname]
            cmd.extend(args.args)
            proc = subprocess.Popen(cmd)
            res = proc.wait()
        sys.exit(res)


class Whoami(Command):
    """
    Authenticate and get user information
    """
    def run(self, args):
        certs = Certs.from_browser()
        with certs.requests() as req:
            res = req.get("https://nm.debian.org/api/whoami")
            print(res.text)


class MakeCert(Command):
    """
    Get a new Debian Single SignOn certificate
    """
    @classmethod
    def add_parser(cls, subparsers):
        sp = super().add_parser(subparsers)
        sp.add_argument("username", help="account user name")
        sp.add_argument("--domain", default=None, help="override domain (debian or alioth, default inferred from user name)")
        sp.add_argument("-d", "--days", default=365, type=int, help="certificate duration in days")
        sp.add_argument("-c", "--comment", default=None, help="description for this certificate in the sso.debian.org user interface")
        sp.add_argument("-s", "--size", default=2048, help="RSA key size")
        return sp

    def run(self, args):
        from getpass import getpass
        if args.domain is None:
            if args.username.endswith("-guest"):
                domain = "alioth"
            else:
                domain = "debian"
        else:
            domain = args.domain

        if domain == "debian":
            pw_type = "Debian Web password"
        else:
            pw_type = "Alioth password"

        password = getpass("Enter your {} password: ".format(pw_type))

        session = requests.session()
        session.auth = (args.username, password)
        url = "https://sso.debian.org/{domain}/certs/enroll_csr/".format(domain=domain)
        r = session.get(url + "?format=json")
        r.raise_for_status()
        info = r.json()

        def run_openssl(*args, **kw):
            log.info("Running %s", " ".join(shlex.quote(x) for x in args))
            r = subprocess.run(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True, **kw)
            r.check_returncode()
            return r

        r = run_openssl("openssl", "genrsa", str(args.size))
        key = r.stdout

        r = run_openssl("openssl", "req", "-new", "-sha256", "-key", "-", "-batch", input=key)
        csr = r.stdout

        r = session.post(url, data={
            "csr": csr,
            "validity": args.days,
            "comment": args.comment,
        }, headers={
            "Referer": url,
            "X-CSRFToken": info["csrf_token"],
        })
        r.raise_for_status()
        crt = r.text

        log.info("Writing key to %s.key", args.username)
        with open(args.username + ".key", "wt") as out:
            os.fchmod(out.fileno(), 0o400)
            out.write(key)

        log.info("Writing cert to %s.crt", args.username)
        with open(args.username + ".crt", "wt") as out:
            out.write(crt)


def main():
    cli = Cli(
        prog="debsso",
        description="Debian Single Sign-On command line client utility",
    )
    cli.add_command(Whoami)
    cli.add_command(Exec)
    cli.add_command(Curl)
    cli.add_command(MakeCert)
    cli.main()


if __name__ == "__main__":
    main()
