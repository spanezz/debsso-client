#!/usr/bin/python3
from debssolib.certs import Certs
from debssolib.utils import Cli, Command
import sys
import os
import subprocess
import cmd
import shutil
import tempfile
import logging

log = logging.getLogger()


class Advocate(Command):
    """
    Read a signed statement and post it as an advocacy message
    """
    @classmethod
    def add_parser(cls, subparsers):
        sp = super().add_parser(subparsers)
        sp.add_argument("process", type=int, help="Process number")
        sp.add_argument("file", nargs="?", help="File with the unsigned statement (default: stdin)")
        return sp

    def run(self, args):
        if args.file:
            with open(args.file, "rb") as infd:
                data = infd.read()
        else:
            data = sys.stdin.read()

        certs = Certs.from_browser()
        with certs.requests() as req:
            signed = self._sign_statement(req, data)
            self._submit(req, args.process, signed)

    def _get_fingerprint(self, req):
        res = req.get("https://nm.debian.org/api/whoami")
        whoami = res.json()
        uid = whoami.get("uid", "<uid unknown>")
        fpr = whoami.get("fpr")
        if fpr is None:
            raise Fail("I could not find a valid fingerprint for user {} on nm.debian.org".format(uid))
        log.info("Statement to be signed as %s with key %s", uid, fpr)
        return fpr

    def _sign_statement(self, req, data):
        """
        Sign a statement with the key the current user has on nm.debian.org,
        and return the clearsigned data
        """
        fpr = self._get_fingerprint(req)
    
        cmd = ["gpg", "--clearsign", "--default-key", fpr]
        res = subprocess.run(cmd, input=data, stdout=subprocess.PIPE, universal_newlines=True)
        if res.returncode != 0:
            raise Fail("gpg exited with error code {}".format(res.returncode))

        return res.stdout

    def _submit(self, req, process, signed):
        url = "https://nm.debian.org/process/{}/advocate/statement/create".format(process)
        res = session.get(url, **cert_args)
        res.raise_for_status()
        res = session.post(url,
                        allow_redirects=False,
                        headers={
                            "Referer": url,
                            "X-CSRFToken": res.cookies["csrftoken"],
                        },
                        data={
                            "csrfmiddlewaretoken": res.cookies["csrftoken"],
                            "statement": signed,
                        }, **cert_args)
        res.raise_for_status()
        if res.status_code == 200:
            from lxml.html import document_fromstring
            page = document_fromstring(res.content)
            for el in page.iter("ul"):
                _class = el.attrib.get("class", None)
                if _class is None: continue
                if "errorlist" not in _class: continue
                for li in el.iter("li"):
                    print(li.text, file=sys.stderr)
                sys.exit(1)


class ApprovalsCmd(cmd.Cmd):
    intro = "Welcome to debsso-nm approvals. Use '?' or 'help' for help.\n"
    prompt = "> "

    def __init__(self, requests):
        super().__init__()
        self.requests = requests
        self.process_cache = []
        self.current_process = None
        self.tmpdir = tempfile.TemporaryDirectory()

        # Copy the user gpghome into a working copy
        self.user_gpghome = os.environ.get("GNUPGHOME", os.path.expanduser("~/.gnupg"))
        log.info("Making a local working copy of %s", self.user_gpghome)
        self.dest_gpghome = os.path.join(self.tmpdir.name, ".gnupg")
        shutil.copytree(self.user_gpghome, self.dest_gpghome)
        self.env = dict(os.environ)
        self.env["GNUPGHOME"] = self.dest_gpghome

    def do_ls(self, arg):
        """
        Show processes pending approval
        """
        if not self.process_cache:
            res = self.requests.get("https://nm.debian.org/rest/api/processes/?format=json")
            self.process_cache = res.json()
            self._set_current_process(None)
        
        import texttable
        table = texttable.Texttable()
        table.set_deco(0)
        table.add_row(("idx", "id", "status", "for", "uid", "name"))
        for idx, process in enumerate(self.process_cache, start=1):
            flags = (
                ("f" if process["frozen_by"] else "-") +
                ("a" if process["approved_by"] else "-") +
                ("c" if process["closed"] else "-")
            )
            table.add_row((
                idx,
                process["id"],
                flags,
                process["applying_for"],
                process["person"]["uid"],
                process["person"]["fullname"]))
        print(table.draw())

    def _set_current_process(self, process=None):
        if process is None:
            self.current_process = None
            self.prompt = "> "
        else:
            self.current_process = process
            self.prompt = "{}â†’{}> ".format(process["person"]["uid"], process["applying_for"])


    def _do_process(self, idx):
        if idx - 1 >= len(self.process_cache):
            print("Invalid process #{}".format(idx))
            return
        self._set_current_process(self.process_cache[idx - 1])

    def do_mbox(self, arg):
        """
        Show the mailbox of the currently selected process in mutt
        """
        if self.current_process is None:
            print("Choose a process first")
            return
        process = self.current_process

        # Import the applicant's key
        log.info("Importing applicant key %s", process["person"]["fpr"])
        subprocess.run(["gpg", "--recv", process["person"]["fpr"]], env=self.env)

        # TODO: also import the AM and all advocates' keys


        log.info("Retrieving mailbox")
        res = self.requests.get("https://nm.debian.org/process/{}/mailbox/download".format(process["id"]))

        with tempfile.NamedTemporaryFile("wb", suffix=".mbox.gz") as f:
            f.write(res.content)
            f.flush()
            subprocess.run(["mutt", "-f", f.name], env=self.env)

    def default(self, line):
        if line.isdigit():
            return self._do_process(int(line))
        elif line == "!":
            subprocess.run([os.environ["SHELL"]], env=self.env)
            return
        return super().default(line)

    def do_quit(self, arg):
        """
        Quit approvals interface
        """
        return True

    def do_EOF(self, arg):
        print("quit")
        return True


class Approvals(Command):
    """
    Interactive process approval interface
    """
    def run(self, args):
        certs = Certs.from_browser()
        with certs.requests() as req:
            app = ApprovalsCmd(req)
            app.cmdloop()


def main():
    cli = Cli(
        prog="debsso-nm",
        description="Debian Single Sign-On command line client utility",
    )
    cli.add_command(Advocate)
    cli.add_command(Approvals)
    cli.main()


if __name__ == "__main__":
    main()
